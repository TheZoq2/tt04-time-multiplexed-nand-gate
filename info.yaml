--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - spade.sv
  top_module:  "tt_um_thezoq2_tmng"      # put the name of your top module here, make it unique by prepending your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Frans Skarman"
  title:        "Time Multiplexed Nand-gate"
  language:     "Spade (https://spade-lang.org/)"
  description:  "The furthest you can go in the time/space tradeoff - A single nand gate and a whole lot of multiplexers"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    All boolean functions can be implemented using only NAND-gates. This in
    turn means that we can perform an arbitrary computation by feeding
    inputs into a single nand gate.

    This design consists of just that, a single NAND-gate, a 128 bit register
    file, and a controller which reads 'instructions' from the input ports to
    drive a multiplexer to select the inputs and write enable signals for the
    register file.

    The number of IO pins is limited and since each nand operation requires
    three 7 bit operands (two source registers and one destination),
    instructions are fed over two 'cycles'. The first cycle feeds the first
    operand register as well as some control metadata (in this version, a
    single bit specifying if the output of the NAND gate should be fed to an
    output shift register). In the second cycle, the other source register is
    specified, along with the destination register.

    The most significant bit of `ui_in` specifies the `mode`. If it is 0, the
    rest of `ui_in` contains the first address and `uio_in` contains the
    metadata. If `mode` is 1, the rest of `ui_in` contanis the second operand
    address and `uio_in[6:0]` contains the destination while `uio_in[7]`
    contains a commit bit. The result is stored on the first cycle at which
    `uio_in[7]` is set.

    It is important to make sure that the signals have time to stabilize before
    changing them. Therefore, ensure that `mode` is changed to `1` before the
    rest of the inputs are set to their new values. Similarly, ensure that the
    commit bit is only set when the signals are stable. Refer to this [timing
    diagram](https://gitlab.com/TheZoq2/tto4_time_multiplexed_nand_gate/-/blob/main/timing.png)
    for an example.

    The design also contains an 8 bit shift register mapped to the io pins. If
    the least significant bit of `uio_in` is set in `mode0`, the output of the
    nand gate at the next `commit` will be pushed into the shift register


# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
    This needs some currently undesigned hardware for driving the inputs. Once
    that is available and connected, design a circuit using only nand gates,
    map wires to registers and upload the design as specified in how it works.

    I have plans to write a yosys backend for this, but we'll see if those plans materialize :)

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:
    - address1
    - address1
    - address1
    - address1
    - address1
    - address1
    - address1
    - mode
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - shift register out
    - shift register out
    - shift register out
    - shift register out
    - shift register out
    - shift register out
    - shift register out
    - shift register out
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - addres2 / push_output
    - addres2
    - addres2
    - addres2
    - addres2
    - addres2
    - addres2
    - commit

# The following fields are optional
  tag:          "test, experiment, fpga"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "TheZoq2"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      "schematic.png"      # relative path to a picture in your repository
